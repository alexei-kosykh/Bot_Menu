import gspread

from my_private_keys import TOKEN, USERS, BUTTONS
import state
import edit_buying, get_ingredients_dish, get_menu_date, get_menu_today, get_recept, get_access_table

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# List of users that can work with app
ALLOWED_USERS = USERS

# Comand /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # Checking user allow
    if user.username not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–∞—à username –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.")
        return

    keyboard = BUTTONS
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # Checking allow
    if user.username not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # --- Checking state ---
    if state.USER_STATE.get(user_id) == "WAITING_FOR_DISH":
        await get_ingredients_dish.run(update, context, text)
        state.USER_STATE.pop(user_id)
        return

    if state.USER_STATE.get(user_id) == "WAITING_FOR_BUY_INPUT":
        await edit_buying.run(update, context, text)
        return

    if text == "üìÖ –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        await get_menu_today.run(update, context)
        return

    if text == "‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∫—É–ø–ª–µ–Ω–Ω–æ–µ":
        state.USER_STATE[user_id] = "WAITING_FOR_BUY_INPUT"
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 3 –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å",
            parse_mode="Markdown"
        )
        return

    if text == "üîç –ù–∞–π—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã":
        state.USER_STATE[user_id] = "WAITING_FOR_DISH"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
        return

    elif text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è")

# Main function
def main():
    # Create app and transfer bot token
    application = Application.builder().token(TOKEN).build()

    # Add handler
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Run bot
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

# Endpoint in program
if __name__ == "__main__":
    main()