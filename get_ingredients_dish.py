from get_access_table import sheetMenuBaseRecepts as sheet
from telegram import Update
from telegram.ext import ContextTypes
import state

async def run(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    text = text.strip()
    user_id = update.effective_user.id

    try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ E (–Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥)
            dishes_col = sheet.col_values(5)  # E - 5-—è –∫–æ–ª–æ–Ω–∫–∞

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –±–ª—é–¥–æ–º
            try:
                start_row = dishes_col.index(text) + 1  # Google Sheets 1-indexed
            except ValueError:
                await update.message.reply_text(f"‚ùå –ë–ª—é–¥–æ '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return


            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª—é–¥–∞
            end_row = len(dishes_col) + 1
            for i in range(start_row, len(dishes_col)):
                if dishes_col[i].strip():  # –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞, –∑–Ω–∞—á–∏—Ç –Ω–æ–≤–æ–µ –±–ª—é–¥–æ
                    end_row = i + 1
                    break

            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ F, G, H
            range_f = f"F{start_row}:F{end_row-1}"
            range_g = f"G{start_row}:G{end_row-1}"
            range_h = f"H{start_row}:H{end_row-1}"

            col_f = sheet.get(range_f)
            col_g = sheet.get(range_g)
            col_h = sheet.get(range_h)

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª–∏–Ω—É
            length = max(len(col_f), len(col_g), len(col_h))
            def normalize(col):
                values = [row[0] if row else "" for row in col]
                while len(values) < length:
                    values.append("")
                return values

            col_f = normalize(col_f)
            col_g = normalize(col_g)
            col_h = normalize(col_h)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"üìã *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è {text}:*\n\n"
            for i in range(length):
                response += f"{col_f[i]} | {col_g[i]} | {col_h[i]}\n"

            await update.message.reply_text(response, parse_mode="Markdown")
            if user_id in state.USER_STATE:
              state.USER_STATE.pop(user_id)
            return

    except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {e}")
